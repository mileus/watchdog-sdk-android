ext {
    getVersionTag = { variant ->
        def stdout = new ByteArrayOutputStream()
        try {
            exec {
                commandLine "git", "describe", "--match", "${variant}/*", "--long"
                standardOutput = stdout
            }
            def longTag = stdout.toString().trim()

            return longTag.substring(longTag.indexOf('/') + 1, longTag.indexOf('-'))
        }
        catch (exception) {
            println stdout
            println "Failed to read version tag: " + exception
            return "0.0.1";
        }
    }

    getVersionCode = { tag ->
        def parts = tag.tokenize('.')
        if (parts.size() != 3 || parts[1].length() > 2 || parts[2].length() > 2) {
            throw new RuntimeException("Invalid version tag \"${tag}\", format \"x.y.z\" expected.")
        }
        if (parts[1].length() == 1) {
            parts[1] = "0" + parts[1]
        }
        if (parts[2].length() == 1) {
            parts[2] = "0" + parts[2]
        }
        return Integer.parseInt(parts[0] + parts[1] + parts[2])
    }

    getVersionName = { tag ->
        return tag
    }
}

android.applicationVariants.all { variant ->
    def versionTag
    if (variant.buildType.name == 'debug') {
        versionTag = getVersionTag('alpha')
    } else {
        versionTag = getVersionTag(variant.buildType.name)
    }

    def myVersionCode = getVersionCode(versionTag)
    def myVersionName = getVersionName(versionTag)

    println variant.name + "[" + myVersionCode + ", " + myVersionName + "]"

    variant.outputs.all { output ->
        output.versionCodeOverride = myVersionCode
        output.versionNameOverride = myVersionName
    }

    variant.buildConfigField "int", "VERSION_CODE_REAL", "${myVersionCode}"
    variant.buildConfigField "String", "VERSION_NAME_REAL", "\"${myVersionName}\""
}